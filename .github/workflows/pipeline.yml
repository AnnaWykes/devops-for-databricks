# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: DevOps for Databricks

on:
  push:
    branches: [ main, gitactions ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: "devopsfordbxkv01dev" # name of key vault in Azure portal
        secrets: 'DBXInstance, ResourceGroup, SubscriptionID, SVCApplicationID, SVCDirectoryID, SVCSecretKey, WorkspaceName'  # comma separated list of secret keys to fetch from key vault 
      id: getAzureSecrets
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pyspark pytest-cov requests
        python -m pip install --user --upgrade setuptools wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Create wheel
      run: |
        cd wheel
        python setup.py sdist bdist_wheel
    - name: Install wheel
      run: |
        cd "wheel"
        cd dist
        pip uninstall -y dfordbx-0.0.1-py3-none-any.whl
        pip install dfordbx-0.0.1-py3-none-any.whl
    - name: run wheel tests
      run: |
        cd wheel/tests/unit
        pytest
    - name: authenticate with databricks api
      id: "databricksauth"
      run: |
        python pipelineScripts/authenticate.py
      env: 
        DBXInstance: ${{ steps.getAzureSecrets.outputs.DBXInstance }}
        ResourceGroup: ${{ steps.getAzureSecrets.outputs.ResourceGroup }}
        SubscriptionID: ${{ steps.getAzureSecrets.outputs.SubscriptionID }}
        SVCApplicationID: ${{ steps.getAzureSecrets.outputs.SVCApplicationID }}
        SVCDirectoryID: ${{ steps.getAzureSecrets.outputs.SVCDirectoryID }}
        SVCSecretKey: ${{ steps.getAzureSecrets.outputs.SVCSecretKey }}
        WorkspaceName: ${{ steps.getAzureSecrets.outputs.WorkspaceName }}

    - name: upload wheel to dbfs
      run: |
        python pipelineScripts/upload_wheel_to_dbfs.py
      env: 
        SYSTEM_ARTIFACTSDIRECTORY: "wheel/dist"
        DBRKS_SUBSCRIPTION_ID: ${{ steps.getAzureSecrets.outputs.SubscriptionID }}
        DBRKS_RESOURCE_GROUP: ${{ steps.getAzureSecrets.outputs.ResourceGroup }}
        DBRKS_WORKSPACE_NAME: ${{ steps.getAzureSecrets.outputs.WorkspaceName }}
        DBRKS_INSTANCE: ${{ steps.getAzureSecrets.outputs.DBXInstance }}
        
    - name: create cluster
      run: |
        python pipelineScripts/create_cluster.py
      env: 
        DefaultWorkingDirectory: ""
        DBRKS_SUBSCRIPTION_ID: ${{ steps.getAzureSecrets.outputs.SubscriptionID }}
        DBRKS_RESOURCE_GROUP: ${{ steps.getAzureSecrets.outputs.ResourceGroup }}
        DBRKS_WORKSPACE_NAME: ${{ steps.getAzureSecrets.outputs.WorkspaceName }}
        DBRKS_INSTANCE: ${{ steps.getAzureSecrets.outputs.DBXInstance }}

    - name: install wheel
      run: |
        python pipelineScripts/install_wheel.py
      env: 
        DefaultWorkingDirectory: ""
        DBRKS_SUBSCRIPTION_ID: ${{ steps.getAzureSecrets.outputs.SubscriptionID }}
        DBRKS_RESOURCE_GROUP: ${{ steps.getAzureSecrets.outputs.ResourceGroup }}
        DBRKS_WORKSPACE_NAME: ${{ steps.getAzureSecrets.outputs.WorkspaceName }}
        DBRKS_INSTANCE: ${{ steps.getAzureSecrets.outputs.DBXInstance }}

    - name: restart cluster
      run: |
        python pipelineScripts/restart_cluster.py
      env: 
        DefaultWorkingDirectory: ""
        DBRKS_SUBSCRIPTION_ID: ${{ steps.getAzureSecrets.outputs.SubscriptionID }}
        DBRKS_RESOURCE_GROUP: ${{ steps.getAzureSecrets.outputs.ResourceGroup }}
        DBRKS_WORKSPACE_NAME: ${{ steps.getAzureSecrets.outputs.WorkspaceName }}
        DBRKS_INSTANCE: ${{ steps.getAzureSecrets.outputs.DBXInstance }}

    - name: check wheel status
      run: |
        python pipelineScripts/check_wheel_status.py
      env: 
        DefaultWorkingDirectory: ""
        DBRKS_SUBSCRIPTION_ID: ${{ steps.getAzureSecrets.outputs.SubscriptionID }}
        DBRKS_RESOURCE_GROUP: ${{ steps.getAzureSecrets.outputs.ResourceGroup }}
        DBRKS_WORKSPACE_NAME: ${{ steps.getAzureSecrets.outputs.WorkspaceName }}
        DBRKS_INSTANCE: ${{ steps.getAzureSecrets.outputs.DBXInstance }}
